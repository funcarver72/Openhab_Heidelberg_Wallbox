// Rule File  OpenHAB V3.xx    for Wallbox

var Number ChargingDurationStart     //  save start point in time in millis


rule "Rule_WB_Init"
when
	System started
   or Item SysInit received command ON
then
	logInfo("Init rule: ", "Rule Init Started")

   // User Interface Init
   if (vCHG_EnergyTarget_en.state==NULL)  vCHG_EnergyTarget_en.sendCommand(OFF)
   if (vCHG_EnergyLimit.state==NULL)      vCHG_EnergyLimit.sendCommand(50)
   if (vCHG_PowerTarget_en.state==NULL)   vCHG_PowerTarget_en.sendCommand(0)
   if (vCHG_PowerLimit.state==NULL)       vCHG_PowerLimit.sendCommand(6)

   // if (vCHG_StartTime_en.state==NULL)     vCHG_StartTime_en.sendCommand(OFF)
   if (vCHG_StartTime_H.state==NULL)      vCHG_StartTime_H.sendCommand(18)
   if (vCHG_StartTime_M.state==NULL)      vCHG_StartTime_M.sendCommand(0)

   // if (vCHG_StopTime_en.state==NULL)      vCHG_StopTime_en.sendCommand(OFF)
   if (vCHG_StopTime_H.state==NULL)       vCHG_StopTime_H.sendCommand(6)
   if (vCHG_StopTime_M.state==NULL)       vCHG_StopTime_M.sendCommand(0)

   // Initialisieren der Strings
   vCHG_StartTime_en.sendCommand(ON)
   vCHG_StopTime_en.sendCommand(ON)  
   vCHG_StartTime_en.sendCommand(OFF)
   vCHG_StopTime_en.sendCommand(OFF)

   Go_Charge.sendCommand(OFF)
   
end 


// ------------------------------
// ***   Charging Control     ***
// ------------------------------

//  Formel zur Ermittlung des Max. Ladestroms
//  Ladestrom(neu) = Energieproduktion  -  (HausVerbrauch + Ladestrom(alt) )
//  Dann:  Wenn Ladestrom <= 0 dann Ladestrom = 0

//  Update, alle 5 Minuten (oder besser wenn sich die Zahlen ändern)

// bei 3-phasigem Laden ganz einfach:
//  Laden mit 6A  wenn  der Berechnete Ladestrom >0 ist
// bei 1-phasigem Laden kann man in den Bereich der Regelung kommen.




rule "Rule_Determine_Phases" 
when
   System started
   or Item WB_R010_V_L1 changed
   or Item WB_R011_V_L2 changed 
   or Item WB_R012_V_L3 changed
then 
   if ( (WB_R010_V_L1.state < 50) && (WB_R011_V_L2.state < 50) && (WB_R012_V_L3.state < 50) ) {
      if ((WB_1phase_mode.state!=OFF) || (WB_3phase_mode.state!=OFF)) {
         WB_1phase_mode.sendCommand(OFF)
         WB_3phase_mode.sendCommand(OFF)
         logError("Rule_Determine_Phases", "Check Wallbox Supply, No Supply")
      }
   } 
   else if ( (WB_R010_V_L1.state > 215) && (WB_R011_V_L2.state < 50) && (WB_R012_V_L3.state < 50) ) {
      if ((WB_1phase_mode.state!=ON) || (WB_3phase_mode.state!=OFF)) {
         WB_1phase_mode.sendCommand(ON)
         WB_3phase_mode.sendCommand(OFF)
         logInfo("Rule_Determine_Phases", "Wallbox Supply in 1P Mode L1")
      }
   }
   else if ( (WB_R010_V_L1.state > 215) && (WB_R011_V_L2.state > 215) && (WB_R012_V_L3.state > 215) ) {
      if ((WB_1phase_mode.state!=OFF) || (WB_3phase_mode.state!=ON)) {
         WB_1phase_mode.sendCommand(OFF)
         WB_3phase_mode.sendCommand(ON)
         logInfo("Rule_Determine_Phases", "Wallbox Supply in 3P Mode L1/L2/L3")
      }
   } 
   else {
      if ((WB_1phase_mode.state!=OFF) || (WB_3phase_mode.state!=OFF)) {
         WB_1phase_mode.sendCommand(OFF)
         WB_3phase_mode.sendCommand(OFF)
         logError("Rule_Determine_Phases", "Check Wallbox Supply, Unknown Supply State")
      }
   } 
end


rule "Rule_Determine_CHG_Current"
when 
   System started
or Item vCHG_PowerTarget_en received command
or Item vCHG_PowerLimit received command
then 
  if (vCHG_PowerTarget_en.state==0)             // max. Current
   vCHG_Max_I.sendCommand(160)                  // max Current 16A
  else if (vCHG_PowerTarget_en.state==1)  {     // Selected Power 
     // 1-Phase Mode:
     if (WB_1phase_mode.state==ON) {
      if (vCHG_PowerLimit.state==2)          vCHG_Max_I.sendCommand(87)    // 
         else if (vCHG_PowerLimit.state==3)  vCHG_Max_I.sendCommand(130)   // 
         else if (vCHG_PowerLimit.state>=4)  vCHG_Max_I.sendCommand(160)   // single phase limit reached
         else {
           vCHG_Max_I.sendCommand(0)
           logError("Rule_Determine_CHG_Current", "1P Mode, Unknown Selection of PowerLimit")
         } // end else
     }  // 1p end

     // 3-Phase Mode:
     else if (WB_3phase_mode.state==ON) {
      if (vCHG_PowerLimit.state==2)        vCHG_Max_I.sendCommand(60)       // was 29, not allowed, set 60   
         else if (vCHG_PowerLimit.state==3)  vCHG_Max_I.sendCommand(60)     // was 44, not allowed, set 60   
         else if (vCHG_PowerLimit.state==4)  vCHG_Max_I.sendCommand(60)   
         else if (vCHG_PowerLimit.state==5)  vCHG_Max_I.sendCommand(73)   
         else if (vCHG_PowerLimit.state==6)  vCHG_Max_I.sendCommand(87)   
         else if (vCHG_PowerLimit.state==7)  vCHG_Max_I.sendCommand(102)   
         else if (vCHG_PowerLimit.state==8)  vCHG_Max_I.sendCommand(116)   
         else if (vCHG_PowerLimit.state==9)  vCHG_Max_I.sendCommand(130)   
         else if (vCHG_PowerLimit.state==10) vCHG_Max_I.sendCommand(145)   
         else {
           vCHG_Max_I.sendCommand(0)
           logError("Rule_Determine_CHG_Current", "3P Mode, Unknown Selection of PowerLimit")
         } // end else
      } // 3p end
     else {
        vCHG_Max_I.sendCommand(0)
        logError("Rule_Determine_CHG_Current", "Error on Supply Phases")
     }  // end else
  } // end Power Target enable
  else if (vCHG_PowerTarget_en.state==2) {     // PV Überschuss
      vCHG_Max_I.sendCommand(60)     // Minimum for ON as Starting Value. To be Updated periodically
  }
  else logError("Rule_Determine_CHG_Current", "Unknown Selection of PowerTarget_en")

end


// --------------
//  Timers
rule "Rule_CHG_StartTime_Set"
when 
   Item vCHG_StartTime_en received command ON
or Item vCHG_StartTime_H  received update  
or Item vCHG_StartTime_M  received update 
then
 if (vCHG_StartTime_M.state == 0) 
  vCHG_StartTime_S.postUpdate( (vCHG_StartTime_H.state as Number).intValue.toString + ":00"  )
 else
  vCHG_StartTime_S.postUpdate( (vCHG_StartTime_H.state as Number).intValue.toString + ":" + (vCHG_StartTime_M.state as Number).intValue.toString)
end 

rule "Rule_CHG_StopTime_Set"
when 
   Item vCHG_StopTime_en received command ON
or Item vCHG_StopTime_H  received update  
or Item vCHG_StopTime_M  received update 
then
 if (vCHG_StopTime_M.state == 0) 
  vCHG_StopTime_S.postUpdate( (vCHG_StopTime_H.state as Number).intValue.toString + ":00"  )
 else
  vCHG_StopTime_S.postUpdate( (vCHG_StopTime_H.state as Number).intValue.toString + ":" + (vCHG_StopTime_M.state as Number).intValue.toString)
end 


rule "Rule_Format_CHG_Currents"
when
      Item WB_R006_I_L1 received update 
   or Item WB_R007_I_L2 received update
   or Item WB_R008_I_L3 received update
then 
     vWB_Currents_L1L2L3.postUpdate( (WB_R006_I_L1.state as Number).toString + " A / " + (WB_R007_I_L2.state as Number).toString + " A / " + (WB_R008_I_L3.state as Number).toString + " A" )
end


rule "Rule_Format_Supply_Voltages"
when
      Item WB_R010_V_L1 received update 
   or Item WB_R011_V_L2 received update
   or Item WB_R012_V_L3 received update
then 
     vWB_SupplyV_L1L2L3.postUpdate( (WB_R010_V_L1.state as Number).toString + " V / " + (WB_R011_V_L2.state as Number).toString + " V / " + (WB_R012_V_L3.state as Number).toString + " V" )
end


rule "Rule_Start_Charging"
when
   Item Go_Charge received command ON
then 
   vCHG_EnergyCharged.postUpdate(0.0)                                    // Charging Energy Counter 0 setzen
   vCHG_EnergyStart.postUpdate(WB_R015_Energy_PwrOn.state as Number)     // Startwert des EnergyCounters sichern
   
   var String vCurrent = String.format("%.1f", (vCHG_Max_I.state as Number) /10)     // Calculate for Logging

   if (vCHG_StartTime_en.state==OFF)  {
      ChargingDurationStart = now.toInstant.toEpochMilli

      if (WB_1phase_mode.state==ON) {
        WB_R261_Set_Max_I.sendCommand(vCHG_Max_I.state as Number) 
        logInfo("Rule_Start_Charging: ", "Laden jetzt freigegeben mit L1@ "+vCurrent+" A max")
      }
      else if (WB_3phase_mode.state==ON) {
        WB_R261_Set_Max_I.sendCommand(vCHG_Max_I.state as Number)
        logInfo("Rule_Start_Charging: ", "Laden jetzt freigegeben mit L1L2L3@ "+vCurrent+" A max")
      }
      else logError("Rule_Start_Charging", "ERROR  Supply Power")
   }
   else logInfo("Rule_Start_Charging: ", "Laden freigegeben mit "+vCurrent+" A  um " +vCHG_StartTime_S.state+"h")

end 



rule "Rule_Updates_1min"
when 
  Time cron "0 * * * * ?"              // trigger every minute
then
   if (Go_Charge.state==ON) {

	   var int startMinute = (vCHG_StartTime_M.state as DecimalType).intValue
	   var int startStunde = (vCHG_StartTime_H.state as DecimalType).intValue
      var int stopMinute = (vCHG_StopTime_M.state as DecimalType).intValue
	   var int stopStunde = (vCHG_StopTime_H.state as DecimalType).intValue

	   if (    (vCHG_StartTime_en.state==ON) 
           && (startMinute == now.getMinute() ) 
           && (startStunde == now.getHour() ) 
         )
      {
         WB_R261_Set_Max_I.sendCommand(vCHG_Max_I.state as Number)
         ChargingDurationStart = now.toInstant.toEpochMilli
         logInfo("Rule_Updates_1min: ", "Startzeit erreicht: Laden gestartet mit "+vCHG_Max_I.state.toString+"/10 A")
      }  // end Start Time

      if (    (vCHG_StopTime_en.state==ON) 
           && (stopMinute == now.getMinute() ) 
           && (stopStunde == now.getHour() ) 
         )
      {
         logInfo("Rule_Updates_1min: ", "Stop Time reached")
         Go_Charge.sendCommand(OFF)
      } // end Stop Time

      // Update Charged Energy Counter
      var Number E_n_G = (WB_R015_Energy_PwrOn.state as Number) - (vCHG_EnergyStart.state as Number)
      vCHG_EnergyCharged.postUpdate(E_n_G)
 
      // Manage Energy Target
      if (vCHG_EnergyTarget_en.state==ON) 
      { 
        if (vCHG_EnergyCharged.state >= vCHG_EnergyLimit.state ) 
        {
         logInfo("Rule_Updates_1min: ", "Energy Limit reached")
         Go_Charge.sendCommand(OFF)
        }
      }  // End Energy Target

    
      // ************************************************************
      // Manage PV Power left for Charging  // Charging Strategy
      // ************************************************************
       // Current CHG Pwr in kW; PV-Production in W, House-Consumption in W (incl. actual Charging Power)
      var Number vCHG_Max_P_new = ((WB_R014_PWR_Total.state as Number)*1000) + (OH2Main_ItemSenec_EnergyProduction.state as Number) - (OH2Main_ItemSenec_HouseConsumption.state as Number)
      
      if (vCHG_PowerTarget_en.state==2) {   // PV Überschuss-laden, Erhöhung bei Überschuss, sonst Minimum Current

         if (WB_1phase_mode.state==ON) {    // here in 1P mode
            var Number vCHG_I_max_new = (vCHG_Max_P_new / 23).intValue    //  /230 *10   = /23   as direct Set Current Parameter
            if (vCHG_I_max_new < 60) vCHG_I_max_new = 60    // go on charging with minimum Current
            if (vCHG_I_max_new > 160) vCHG_I_max_new = 160    // Check Limit
            WB_R261_Set_Max_I.sendCommand(vCHG_I_max_new)
            logInfo("Rule_Updates_1min: ", "New Power Limit: "+vCHG_Max_P_new.toString()+" W, 1P Current Setting: "+vCHG_I_max_new.toString+" /10 A")   // DEBUG !
         }
        else 
         if (WB_3phase_mode.state==ON) {  // here in 3P mode
            var Number vCHG_I_max_new = (vCHG_Max_P_new / 69).intValue    //  /230 *10 /3  = /23 /3 = /69  as direct Set Current Parameter
            if (vCHG_I_max_new < 60) vCHG_I_max_new = 60    // go on charging with minimum Current
            if (vCHG_I_max_new > 160) vCHG_I_max_new = 160    // Check Limit
            WB_R261_Set_Max_I.sendCommand(vCHG_I_max_new)
            logInfo("Rule_Updates_1min: ", "New Power Limit: "+vCHG_Max_P_new.toString()+" W, 3P Current Setting: "+vCHG_I_max_new.toString+" /10 A")   // DEBUG !
         }
      } // PV Power Target

   } 
end



rule "Rule_Stop_Charging"
when
   Item Go_Charge received command OFF
then 
   WB_R261_Set_Max_I.sendCommand(0)             // Laden unterbrechen durch Senden von 0
   // Calculate Chg Duration
   val Number CHG_Duration =  now.toInstant.toEpochMilli - ChargingDurationStart  // Differenz in Millisekunden
   val Number CHG_Minutes = (CHG_Duration / 60000).intValue                  // Duration in Minutes
   logInfo("Rule_Stop_Charging: ", "Laden beendet, "+(vCHG_EnergyCharged.state as Number)+" kWh geladen in "+(CHG_Minutes).toString+" min")
end 


rule "Rule_State_Car_disconnected"
when
   Item WB_R005_CH_State changed from "B1" to "A1"
or Item WB_R005_CH_State changed from "C1" to "A1"
or Item WB_R005_CH_State changed from "B2" to "A2"
or Item WB_R005_CH_State changed from "C2" to "A2"
then
   Go_Charge.sendCommand(OFF)
   logInfo("Rule_State_Car_disconnected: ", "Car disconnected")
end

rule "Rule_State_Car_Error"
when
   Item WB_R005_CH_State changed to "ERR"
then
   Go_Charge.sendCommand(OFF)
   logInfo("Rule_State_Car_Error: ", "Car State reports ERROR")
end

rule "Rule_State_Car_connected"
when
   Item WB_R005_CH_State changed from "A1" to "B1"
or Item WB_R005_CH_State changed from "A1" to "C1"
or Item WB_R005_CH_State changed from "A2" to "B2"
or Item WB_R005_CH_State changed from "A2" to "C2"
then
   // Go_Charge.sendCommand(ON)        // decide on automatic start
   logInfo("Rule_State_Car_connected: ", "Car connected")
end



// ------------------------------
// *** Modbus error handling
// ------------------------------


rule "Rule_WB_Poller1_Offline"
when
	System started
or Thing "modbus:poller:Modbus_RTU_Slave1_WB:WB_Poll_Reg4to18" changed
then
	var Tstatus = getThingStatusInfo("modbus:poller:Modbus_RTU_Slave1_WB:WB_Poll_Reg4to18").getStatus()
    if ( (Tstatus.toString == "OFFLINE") || (Tstatus.toString == "UNINITIALIZED" )) 
	{
      vWB_Com_Error.sendCommand(ON)
     logError("Rule_WB_Poller1_Offline: ", "ALARM! Poller1 Offline")
	} else
   if (Tstatus.toString == "ONLINE")  
	{
     vWB_Com_Error.sendCommand(OFF)
     logInfo("Rule_WB_Poller1_Offline: ", "Poller1 back Online")
	}
end
	 
// modbus:poller:Modbus_RTU_Slave1_WB:WB_Poll_Reg100to101

